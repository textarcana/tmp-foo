#!/usr/bin/env bash

set -Eaeuo pipefail -o functrace

source "$HOME/.stdlib.sh"

now_the_log_level_is_debug

# Shell Script State machine from
# http://blog.sarah-happy.ca/2010/12/shell-script-state-machine.html

print_one_line(){
    perl -lwe 'print $ENV{"line"}'
}

if_line_matches_regex(){
    regex_to_match="$1"

    perl -lwe '$ENV{"line"} =~ /$ENV{"regex_to_match"}/ and exit 0 or exit 1'
}

the_line_is_the_start_of_a_block(){
    block_start_regex='^Ohkai.*'

    if_line_matches_regex $block_start_regex
}

the_line_is_the_end_of_a_block(){
    block_end_regex='^Tier.*'

    if_line_matches_regex $block_end_regex
}

log here begins the DFA output:

start_function(){
    echo "initial state"

    if the_line_is_the_start_of_a_block
    then
        state="next"
    fi
}

next_function(){
    if the_line_is_the_end_of_a_block
    then
        state="done"
    else
        print_one_line
    fi
}

done_function(){
    echo "done"
    state="start"
}

# Declare an Associative Array, a.k.a Hash Table, a.k.a. A bash Hash!
#
# This requires bash 4

declare -A states=(
    [start]=start_function
    [next]=next_function
    [done]=done_function
)

now_the_fsm_has_advanced_to_the_next_state(){
    $(eval "echo ${states[$state]}")
}

state="start"

while IFS= read -r line
do
    now_the_fsm_has_advanced_to_the_next_state
done < "$1"

log here ends the DFA.
